# ================================= A test case =================================
library(pcalg)
library(graph)
library(MASS)
library(tictoc)
library(igraph)
library(mice)
library(micd)
library(miceadds)

source("R/MeeksRules.R")
source("R/tcheckTriple.R")
source("R/tpc_cons_intern.R")
source("R/tskeleton.R")
source("R/tskeleton_parallel.R")
source("R/tpc.R")
# read data as imputed_data
dataset_path <- file.path("dataset_imputed/dataset_imputed.Rdata", fsep = .Platform$file.sep)
load.Rdata(dataset_path, "imputed_data")

# make suffStat
suffStatMI <- micd::getSuff(imputed_data, test="gaussMItest")

# input params to pc
p <- imputed_data[[1]] %>% length()
alpha <- 0.01
max_order <- 10

tiers_ <- rep(c(1,2,3,4), times = c(10, 10, 10, 10))
cat("Fitting with alpha =", alpha, "\n")
tic()
cuda_tPC <- tpc(suffStatMI, indepTest = micd::gaussMItest, p = p, alpha = alpha, m.max = max_order, skel.method = "cuda", verbose = FALSE, tiers = tiers_)
cat("\n")
cat("cuda_tPC\n")
print(cuda_tPC)
cat("\n")
cat("cuda_tPC ord =", cuda_tPC@max.ord, "\n")
cat("alpha    =", alpha, "\n\n")
cat("Time consumed:\n")
toc()
cat("\n")

suffStatMICD <- micd::getSuff(imputed_data, test="gaussMItest")
tic()
micd_tPC <- tpc(suffStatMICD, indepTest = gaussMItest, p = p, alpha = alpha, skel.method = "stable", m.max = max_order, tiers = tiers_)
cat("\n")
cat("micd_tPC\n")
print(micd_tPC)
cat("\n")
cat("micd_tPC ord =", micd_tPC@max.ord, "\n")
cat("alpha    =", alpha, "\n\n")
cat("Time consumed:\n")
toc()
cat("\n")